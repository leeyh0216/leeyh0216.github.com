---
layout: post
title:  "[MongoDB] MongoDB 개요"
date:   2018-03-10 21:30:00 +0900
author: leeyh0216
categories: dev database mongodb
---

> 이 문서는 MongoDB 개요에 대해 작성한 문서입니다.

# MongoDB
## NoSQL의 등장과 MongoDB

기존에는 Oracle RDBMS나 Microsoft의 SQLServer를 통해 데이터를 관리하였다. 서비스의 규모가 커질수록 데이터를 여러대의 서버로 분리해야 했고, 라이센스 비용은 증가하게 되었다. 처음에는 MySQL 등의 오픈소스 데이터베이스를 대안으로 삼았지만, 곧 한계를 느끼고 구글, 페이스북 등의 기업에서 NoSQL을 대안으로 내놓게 되었다.

기존의 RDBMS에 비해 NoSQL은 성숙한 서비스가 아니었기 때문에 이를 메인 데이터베이스로 사용하는 경우는 드물었다. HBase나 카산드라 등이 NoSQL의 대표적인 서비스로 떠올랐지만, 이 둘을 구현한 자바 언어의 한계(메모리 관리, 상세하게 말해 Garbage Collection)로 인해 크게 발전하지 못했었다. MongoDB는 비슷한 시기(2007년)에 10gen이라는 회사에서 출시하였고, 지금까지 발전을 거듭해오고 있다.

## RDBMS와 MongoDB의 개념 비교

RDBMS와 MongoDB의 가장 큰 차이는 아래와 같다.

1. MongoDB는 **Schema Free** 데이터베이스이다 : MongoDB에는 RDBMS에서의 Schema라는 개념이 존재하지 않는다. 단, **Index로 정의된 Field의 경우 반드시 포함**하고 있어야 한다.
2. MongoDB는 **비 관계형** 데이터베이스이다 : MongoDB에서는 Collection(RDBMS의 Table에 대응되는 개념) 간의 관계를 규정할 수 없다. 즉, Join 등의 연산이 불가능(최근에는 부분적으로 가능하게 되었다)하다.
3. MongoDB는 NoSQL이다 : MongoDB에서는 **SQL문을 사용하지 않고 자바스크립트 기반의 명령어**를 사용한다.

MongoDB와 RDBMS에서 사용되는 용어를 비교한 표는 아래와 같다.

|   MongoDB   |   RDBMS   |
|-------------|-----------|
|  Database   |  Database |
|  Collection |  Table    |
|  Document   |  Row      |
|  Field      |  Column   |
|  Index      |  Index    |


**MongoDB는 쿼리의 결과로 Cursor를 반환**하며 클라이언트에서 특정 쿼리를 수행했을 때 페이지 단위로 서버에 캐싱 후 클라이언트에게 **반복적으로 Document를 전송**한다. 이는 많은 데이터를 쿼리했을 때 클라이언트 메모리의 급격한 증가를 막아준다.

## MongoDB 아키텍쳐

MongoDB는 크게 5개의 계층으로 나뉘어 있다.

1. 클라이언트 드라이버: 프로그래밍 언어에 맞게 Driver가 구현되어 있으며, 클라이언트를 이를 통해 MongoDB와 통신할 수 있다.
2. 네트워크 프로토콜: MongoDB 서버는 네트워크 프로토콜 계층을 통해 클라이언트 드라이버와 통신하며, 네트워크 프로토콜 계층은 클라이언트에게 수신한 데이터를 쿼리처리기에 전달하거나, 쿼리처리기에서 수신한 데이터를 클라이언트에게 전송한다.
3. 쿼리 처리기: 수신한 쿼리에 대한 처리(Validation 등)를 마친 뒤 스토리지 엔진 API를 통해 스토리지 엔진에 질의한다.
4. 스토리지 엔진 API: 쿼리 처리기는 직접 스토리지 엔진에 접근하지 않고 스토리지엔진 API를 통해 스토리지엔진에 질의할 수 있다.
5. 스토리지 엔진: 수신한 쿼리를 처리하여 디스크에 저장하거나 디스크로부터 데이터를 읽어 쿼리처리기에 전달한다.

## MongoDB 배포 형태

### 단일 노드

1개의 MongoDB 서버를 구동하는 형태이다. 주로 개발 서버 용도로 사용할 때 단일 노드 형태로 구동한다. 물론 서비스 시에도 사용할 수 있지만, Replica Set이 구성되어 있지 않기 때문에 MongoDB가 설치된 서버에 문제가 발생할 경우, HA를 보장할 수 없게 된다.

### 레플리카셋

2대 이상의 MongoDB 서버를 구동하는 형태이다. HA를 구성하기 위해 레플리카셋을 구성하며, 레플리카셋은 1개의 프라이머리 노드와 1개 이상의 세컨드리 노드로 구성된다. 프라이머리 노드는 쿼리를 수신하여 읽기/쓰기 연산을 수행할 수 있고 세컨드리 노드는 읽기 연산만을 수행 가능하다. 만일 프라이머리 노드가 죽은 경우, 나머지 세컨드리노드 중 하나가 프라이머리노드로 선출되어 동작하게 된다.