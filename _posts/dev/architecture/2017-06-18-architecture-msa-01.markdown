---
layout: post
title:  "[MSA] 마이크로 서비스 아키텍쳐-개요"
date:   2017-06-18 00:49:00 +0900
author: leeyh0216
categories: dev architecture microservice
---

> 마이크로 서비스 아키텍쳐를 공부하며 작성한 글입니다.
'마이크로 서비스 아키텍쳐 구축, 한빛미디어' 1장을 참고하여 작성하였습니다.

## 마이크로 서비스 아키텍쳐 공부하게 된 이유

군 전역(2013년 12월) 이후 현재(2017년 6월)까지 약 3년 반 동안 꽤나 많은 프로젝트를 진행했던 것 같다.
처음 개발을 시작했을 때는 안드로이드 어플리케이션을 시작으로, 삼성 멤버십에서는 대부분 통신 관련 c#, c++, java 프로그램, 그 이후에 들어갔던 스타트업에서는 3 tier(Andriod or Web UI - Web Server - DB)를 가진 프로그램을 만들었었고, 현재 회사에서는 빅데이터 처리를 위한 인프라 구성과 실제 데이터를 처리하는 Spark Application을 작성하고 있다.

현 회사에 인턴으로 들어왔을 때부터 시작했던 빅데이터 처리를 위한 인프라(작업 메타 관리, 작업 스케쥴링, 알림 등의 기능을 가진) 구축 시에 '마이크로 서비스 아키텍쳐' 로 구성해보자는 말을 들었다.
주로 팀 내에서 '모놀리식 아키텍쳐'를 사용해 왔었는데, 당시에 팀장님이 '마이크로 서비스 아키텍쳐'로 이번 프로젝트를 진행해 보자고 하셨고 '마이크로 서비스 아키텍쳐'에 아무런 정보가 없었던(현재에도 있다고 말할 수는 없지만...) 나로써는 별다른 고민 없이 작성하여 '마이크로 서비스를 흉내내고 싶은 모놀리식 아키텍쳐'로 현재 인프라를 구성하게 되었다.

하지만 여러가지 기능들이 API 서버 내에 혼재되어 있고, 각 기능들이 서로에 대해 의존성을 가지기 시작하면서 릴리즈 된지 얼마 되지도 않은 서비스의 기능을 수정하는데에 애를 먹게 되면서 진정한 의미의 '마이크로 서비스 아키텍쳐'를 공부하고 해당 방식으로 구현해야겠다는 생각이 들어 공부를 시작하게 되었다.

## 마이크로 서비스란
> 마이크로 서비스란 작고 자율적으로 협업하는 서비스를 의미한다.

### 크기가 작고, 단일 책임을 가진다.

마이크로 서비스 아키텍쳐는 '더이상 쪼갤 수 없을 만큼' 작은 기능을 가진 서비스들로 이루어진 아키텍쳐를 의미한다. 
모놀리틱 아키텍쳐에서는 개별 기능을 클래스를 이용하여 결합도를 떨어뜨리고 응집도를 높이지만, 마이크로 서비스 아키텍쳐에서는 단일 책임을 가지는 프로그램을 구현함으로써 결합도를 떨어뜨리고 응집도를 높일 수 있다. '더이상 쪼갤 수 없을 만큼' 작다는 의미는 하나의 기능을 완전히 다시 만들어 내는데에 2~3주 정도 걸린다는 것으로 해석할 수 있다.

### 자율성

일반적으로 프로그램 구현 시에는 '비즈니스 로직'이 들어가게 된다. 물론, '고객(우리 팀의 경우 다른 팀)'의 요구사항을 구현해 내는 것이 우리의 목표이지만, 공용으로 사용할 수 있는 기능마저도 여러 시스템 내에 중복으로 구현되었다.
예를 들어 시스템 모니터링, 이메일 전송 등의 기능들이 각자의 프로그램 내에서 개별적으로 구현되어 있었다.
또한, 이러한 기능들이 일부 비즈니스 로직에 얽매여 있어 기능을 변경하기가 쉽지 않았다.

마이크로 서비스 아키텍쳐의 각 서비스는 다른 서비스들과는 독립적으로 자신만의 기능을 수행하기 때문에 다른 서비스의 비즈니스 로직에 따라 변경을 강요받지 않는다.
또한, API가 변경되지 않는 이상 구현 언어나 구현 방식을 바꾸어도 관계가 없어지게 된다.

## 마이크로 서비스의 장점

### 기술 이기종성

세상에 완벽한 언어는 없다. 빅데이터를 수집하여 머신러닝으로 수집한 데이터에 대한 분석을 하는 프로젝트를 구현한다고 생각해보자.
빅데이터 수집의 경우 Hadoop Eco System이 워낙 잘 되어 있기 때문에, Hadoop Eco System의 지원이 강한 Java를 사용하는 편이 좋다. 수집한 데이터에 대한 분석의 경우, Tensorflow, Keras 등 Python을 사용하는 것이 좋다.
하지만 이러한 시스템을 모놀리틱으로 구현하게 된다면, Java로만 다 구현해서 Tensorflow를 사용하기 힘들거나, Python으로만 구현해서 Hadoop Eco System을 사용하기 힘들거나 한 상황이 닥치게 된다.

마이크로 서비스 아키텍쳐를 사용한다면, 빅데이터 서비스는 Java로 구현하고 머신러닝 서비스는 Python으로 구현한 후 HTTP나 RPC와 같은 통신으로 API를 개방하여 서로 간에 API를 통하여 기능 수행이 가능하게 만들면 된다.

### 회복성

현재 팀에서 사용 중인 API 서비스는, 다양한 기능들이 혼재 되어 있다.
알림 기능, 작업 상태 관리 기능, Agent의 상태 관리 기능 등 여러 기능들이 하나의 Spring Boot Application 내의 클래스들로 구성되어 있다.
이 API 서비스가 임의의 오류로 인해 다운되는 상황이 발생하면 전체 시스템이 중지되게 된다. Agent의 상태를 관리하는 기능이 다운되어 사용자에게 알림을 보내야 하지만, 같은 프로그램 내에 존재하기 때문에 사용자는 적절한 때에 알림을 받지 못하게 되고, 뭔가 문제를 감지한 사용자가 직접 시스템 로그를 확인한 후에야 문제를 파악할 수 있다.

마이크로 서비스 아키텍쳐의 경우 한 서비스에서 장애가 발생하더라도, 다른 서비스와 혼재되어 있지 않기 때문에 전체 시스템의 장애로 퍼지지 않는다.
물론, 네트워크 시스템 등의 장애가 발생한다면, 마이크로 서비스 아키텍쳐도 무사할 수는 없고, 이에 대한 차선책이 필요하다.

### 확장성

모놀리식 아키텍쳐에서는 항상 모든 것을 함께 확장해야 한다. 하나의 기능이 높은 성능을 요구할 경우, 전체 프로그램이 새로운 고성능 서버로 옮겨가야 한다.
하지만 작은 서비스로 구성되어 있다면, 필요한 서비스만 고성능 서버로 옮겨갈 수 있다.

### 배포 용이성

모놀리식 아키텍쳐의 경우 코드 한줄을 수정하더라도 전체 시스템을 다시 배포해야 하는 상황이므로, 위험성이 높다.
하지만 마이크로 서비스 아키텍쳐의 경우 시스템 하나만 배포가 가능하고, 문제가 발생한 경우 해당 서비스만을 롤백하여 재배포하여 문제를 격리시킬 수 있다.

### 조합성

마이크로 서비스 아키텍쳐의 경우 기능을 재사용할 기회가 많아진다.
다른 서비스에 얽매이지 않게(비즈니스 로직을 많이 포함하지 않고 의존적이지 않게) 작성되었기 때문에, 순수한 하나의 기능을 재활용할 수 있는 기회가 많아진다.
