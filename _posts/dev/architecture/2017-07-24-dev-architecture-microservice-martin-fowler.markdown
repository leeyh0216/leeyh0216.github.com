---
layout: post
title:  "[MSA] 마틴 파울러 - 마이크로 서비스 아키텍쳐"
date:   2017-07-24 20:56:00 +0900
author: leeyh0216
categories: dev architecture microservice
---

> 이 문서는 martin fowler의 micro service architecture article(https://martinfowler.com/articles/microservices.html)를 정리한 글입니다.

# 마이크로 서비스 아키텍쳐
## 마이크로 서비스 아키텍쳐란?

### 기본 개념

마이크로 서비스 아키텍쳐는 소프트웨어 아키텍쳐에서 새로 나온 용어이다.

지난 몇년간 마이크로 서비스 아키텍쳐를 사용하여 긍정적인 결과를 이끌어내고, 엔터프라이즈 어플리케이션을 구성하는 것을 볼 수 있었다. 하지만 마이크로 서비스 아키텍쳐 스타일이 정확히 어떤것이고, 어떻게 그것을 할 수 있는지에 대한 정보는 많지 않다.

짧게 정리하자면, 마이크로 서비스 아키텍쳐 스타일은 하나의 어플리케이션을 자신의 프로세스를 가지고 있고, HTTP와 같은 경량화된 커뮤니케이션 방식을 가진 서비스들로 구성하는 개발 방식이다.
이러한 서비스들은 자신의 비즈니스 영역을 가지고 있고, 완전히 자동화된 개발 머신에 개별적으로 배포될 수 있다.

이러한 서비스들을 관리할 수 있는 작은 중앙 관리 시스템을 가질 수도 있지만, 각 서비스들은 다른 언어와 데이터베이스 저장소로 구성될 수 있다.

### 모놀리틱 아키텍쳐 vs 마이크로 서비스 아키텍쳐

마이크로 서비스 아키텍쳐를 설명하는 가장 쉬운 방법은 모놀리틱 아키텍쳐와 비교하는 것이다.

모놀리틱 어플리케이션은 하나의 단일 구조로 이루어져 있다. 엔터프라이즈급 어플리케이션은 보통 3개의 파트로 나뉘어진다.

- client-side user interface
- server-side application
- database

여기에서 server-side application은 http 요청을 수신하고, 도메인 로직(비즈니스 로직)을 수행하고, 데이터베이스의 정보를 업데이트/조회하고 클라이언트에게 응답한다.
이렇게 하나의 실행가능한 논리 구현체인 server-side application을 모놀리틱 스타일이라고 부른다.

모놀리틱 서버는 시스템을 구성하는 가장 일반적인 방법이다. 모든 로직은 하나의 단일 프로세스에서 처리되고, 사용하는 언어의 클래스, 함수, 네임스페이스와 같은 개념으로 모듈화 할 수 있도록 한다.
개발자는 자신의 PC에서 이러한 시스템을 빌드/테스트/실행할 수 있고, 로드밸런서와 여러 개의 Instance를 이용하여 수평적 확장을 이룰 수 있다.

모놀리틱 어플리케이션은 성공적으로 만들어질 수 있지만, 클라우드 환경으로 어플리케이션이 배포되면서 불편해지기 시작했다. 모놀리틱 어플리케이션에서는 작은 변경이 있어도 전체 어플리케이션을 다시 빌드하고 배포해야 한다.
또한 시간이 지나며 프로그램의 모듈 구조를 유지하기 어려워지고, 하나의 모듈의 변경이 다른 모듈에 사이드 이펙트를 가져오는 것을 막기 힘들어진다.

이러한 불편함이 마이크로 서비스 아키텍쳐를 만들어냈다.
어플리케이션을 서비스 단위로 만들면서 각 서비스들은 개별적으로 배포될 수 있고, 자신만의 비즈니스 영역을 가지며 다른 언어로 쓰여질 수 있다.

## 마이크로 서비스 아키텍쳐의 특징

### 서비스로의 모듈화

오랜 기간 동안 큰 시스템을 작은 컴포넌트들의 조합으로 만들기를 원해왔고, 지난 20년 동안 Language Platform의 common library의 조합을 통해 이러한 것이 가능하게 되는 것을 보아 왔다.

여기서의 컴포넌트의 정의는, 독립적으로 대체되고 개선될 수 있는 소프트웨어 유닛이다.

마이크로 서비스 아키텍쳐 또한 라이브러리를 사용하지만 컴포넌트의 기준은 서비스이다. 마이크로 서비스 아키텍쳐에서의 라이브러리는 프로그램 내에서 특정 기능을 수행할 수 있는 집합체로 정의할 수 있고, 서비스는 Web Request, RPC 등으로 통신하며 기능을 수행하는 프로세스의 단위로 정의한다.

서비스를 컴포넌트의 단위로 사용하는 이유 중 가장 큰 이유는 독립적인 배포가 가능하다는 것이다. 만일 여러 개의 라이브러리로 이루어진 프로그램에서 일부분을 바꾸게 되면, 전체 어플리케이션을 다시 빌드한 후 배포해야 한다.
하지만 어플리케이션이 서비스 단위로 구성되어 있다면, 원하는 부분의 서비스만 수정한 후 빌드하여 배포하면 된다.

물론 다른 서비스(또는 컴포넌트)와 커뮤니케이션을 하는 Interface가 변경된다면 이러한 목적을 달성할 수는 없지만, 좋은 마이크로 서비스 아키텍쳐는 이러한 Interface의 변경 또한 최소화하여 변경의 최소화라는 목적을 이루어내야 한다.

서비스를 컴포넌트의 단위로 사용하는 다른 이유는 Interface 표현이 명시적이라는 것이다.
대부분의 언어는 Interface 표현에 좋은 방식을 가지고 있지 않다. 오직 Documentation 만이 Interface를 표현할 수 있는 방식이며, 컴포넌트들을 강하게 결합시킬 수 있는 문제점을 가지게 된다. 마이크로 서비스 아키텍쳐는 이를 Remote Call Mechanism 을 통해 해결하였다.

이러한 방식으로 서비스를 운영하는 것에 단점도 존재한다. Remote Call은 프로세스 내부에서의 함수 호출보다 비싸며, Remote API가 coarsed grained 해야한다는 것이다.

### 