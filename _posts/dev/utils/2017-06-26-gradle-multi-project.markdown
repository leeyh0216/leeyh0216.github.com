---
layout: post
title:  "[Gradle] Gradle Multi Project 구성"
date:   2017-06-25 22:28:00 +0900
author: leeyh0216
categories: dev utils gradle
---

> gradle을 이용하여 Multi Project를 구성하는 법에 대해 작성한 문서입니다.

## Gradle을 이용한 Multi Project 구성하기

서버-클라이언트로 이루어진 프로젝트를 자바로 구현할 경우 따로 Project를 구성하여 진행할 수도 있지만, 하나의 프로젝트 안에 서브 프로젝트 2개로 구성할 수도 있다.

gradle의 multi project 기능을 이용하면, 쉽게 서비 프로젝트 구성을 진행할 수 있다.

### 초기화

일단 sample-project라는 폴더를 만들고, gradle init 명령어를 이용하여 프로젝트를 초기화하자.

{% highlight bash %}
$ mkdir sample-project
$ cd sample-project/
$ gradle init
{% endhighlight %}

gradle init 명령어를 사용하면 다음과 같이 5개의 파일/폴더가 생성되는 것을 확인할 수 있다.

- build.gradle
- gradle	
- gradlew
- gradlew.bat
- settings.gradle

이 중 settings.gradle을 열어보면 다음과 같은 내용이 자동 생성되어 있는 것을 확인할 수 있다.

{% highlight gradle %}
/*
 * This settings file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * In a single project build this file can be empty or even removed.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user guide at https://docs.gradle.org/3.5/userguide/multi_project_builds.html
 */

/*
// To declare projects as part of a multi-project build use the 'include' method
include 'shared'
include 'api'
include 'services:webservice'
*/

rootProject.name = 'sample-project'
{% endhighlight %}

gradle init 을 수행하면, 해당 폴더의 이름으로 프로젝트 명이 생성된다. 프로젝트 명은 rootProject.name 에 들어있다.

RootProject는 1개 이상의 SubProject로 구성될 수 있다.
SubProject를 추가하기 위해서는 include문을 이용하면 된다.
하위에 server와 client라는 SubProject를 추가하기 위해서는 다음과 같이 settings.gradle을 변경하면 된다.

{% highlight gradle %}
rootProject.name = 'sample-project'
include 'server', 'client', 'core'
{% endhighlight %}

settings.gradle에 include된 'server'와 'client', 'core' 프로젝트를 만들기 위해 다음과 같이 폴더 구조를 생성한다. settings.gradle에 include된 이름과 폴더 이름이 동일해야 gradle이 인식할 수 있다.

- sample-project
  - core
    - src
      - main
        - java
        - resources
      - test
        - java
        - resources

  - server
    - src
      - main
        - java
        - resources
      - test
        - java
        - resources

  - client
    - src
      - main
        - java
        - resources
      - test
        - java
        - resources

이제 build.gradle을 확인해보자.

초기 내용은 다음과 같이 설정되어 있다.
{% highlight gradle %}
/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.22'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/
{% endhighlight %}

위 내용은 기본적인 Single Project의 build.gradle 파일이다.
Multi Project 의 build.gradle으로 구성하기 위해서는 다음과 같이 변경해야 한다.

{% highlight gradle %}
buildscript {
        repositories {
                jcenter()
        }
}
subprojects{
        project.group = 'com.sample-project'
        project.version = '0.1'

        apply plugin : 'java'

        repositories {
                jcenter()
        }

        dependencies {
                compile 'org.slf4j:slf4j-api:1.7.22'
             

			      testCompile 'junit:junit:4.12'
        }
}

project(':core') {

}

project(':server') {
        dependencies {
                compile project(':core')
        }
}

project(':client') {
        dependencies {
                compile project(':core')
        }
}
{% endhighlight %}

위와 같이 build.gradle을 구성할 수 있는데, Single Project의 build.gradle과 다른 점을 확인해보도록 하자.

1. subprojects

  RootProject에 속한 모든 하위 프로젝트가 공유하는 내용이다.
  project.group과 project.version 정보를 기본적으로 공유하게 된다.
  
  apply plugin : 'java' 와 같이 기입되어 있으므로, 하위 모든 프로젝트는 java 기반 프로젝트로 만들어진다.
  
  repositories 에는 jcenter()가 있는데, 이 또한 하위 프로젝트에서 jcenter()를 artifactory repository로 공통으로 사용한다는 의미이다.
  
  dependencies의 경우 compile scope로 slf4j와 testCompile scope로 junit이 포함되어 있는데, 하위 프로젝트 구성에서 이 두개를 따로 dependency로 적지 않아도 자동으로 dependency로 선언되게 된다.

2. project
  
  RootProject를 구성하는 하위 프로젝트들이 개별적으로 사용하는 구문이다.
  
  우리가 만들 프로젝트는 server와 client가 존재하고, core project를 공유하는 형식으로 진행할 것이다.
  project의 ()안에 들어갈 내용은 :{프로젝트 폴더명(settings.gradle에서 include한 내용)}이 들어가면 된다.
  
  project 블록 내에 dependencies나 plugin과 같이 기존 build.gradle에 적는 내용을 포함할 수 있는데, 블록 내에 선언되는 내용은 해당 블록의 프로젝트에만 적용된다.
  
  만일 다음과 같이 project(':server')의 내용을 바꾸게 된다면,
  {% highlight gradle %}
  project(':server') {
        dependencies {
                compile project(':core')
                compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'

                testCompile group: 'org.apache.sshd', name: 'sshd-core', version: '1.4.0'
        }
}
  {% endhighlight %}
  
  server 프로젝트만 jsch, sshd-core 라이브러리를 dependency로 가지게 된다.
  
  또한, 같은 RootProject에 속한 다른 Subproject를 참고하기 위해서는 
  {% highlight gradle %}
  compile project(':{프로젝트명}')
  {% endhighlight %}
  
  과 같이 사용하면 된다.
  
### 빌드

rootProject에서 gradle build를 진행하게 되면, 다음과 같이 로그가 남게 된다.

{% highlight bash %}
:core:compileJava
:core:processResources NO-SOURCE
:core:classes
:core:jar
:client:compileJava NO-SOURCE
:client:processResources NO-SOURCE
:client:classes UP-TO-DATE
:client:jar
:client:assemble
:client:compileTestJava NO-SOURCE
:client:processTestResources NO-SOURCE
:client:testClasses UP-TO-DATE
:client:test NO-SOURCE
:client:check UP-TO-DATE
:client:build
:core:assemble
:core:compileTestJava NO-SOURCE
:core:processTestResources NO-SOURCE
:core:testClasses UP-TO-DATE
:core:test NO-SOURCE
:core:check UP-TO-DATE
:core:build
:server:compileJava
:server:processResources NO-SOURCE
:server:classes
:server:jar
:server:assemble
:server:compileTestJava
:server:processTestResources NO-SOURCE
:server:testClasses
:server:test
:server:check
:server:build
{% endhighlight %}

각 행은 :{프로젝트명}:{gradle task명}과 같이 구성되어 있다.

만일 단일 프로젝트 빌드를 진행하고 싶다면, 다음과 같이 명령어를 구성하면 된다.

{% highlight bash %}
gradle :{프로젝트명}:{gradle task명}
{% endhighlight %}

core 프로젝트만 빌드를 진행해보겠다.

core 프로젝트는 다른 프로젝트에 의존성이 없으므로 다음과 같은 출력을 보인다.

{% highlight bash %}
:core:compileJava UP-TO-DATE
:core:processResources NO-SOURCE
:core:classes UP-TO-DATE
:core:jar UP-TO-DATE
:core:assemble UP-TO-DATE
:core:compileTestJava NO-SOURCE
:core:processTestResources NO-SOURCE
:core:testClasses UP-TO-DATE
:core:test NO-SOURCE
:core:check UP-TO-DATE
:core:build UP-TO-DATE

BUILD SUCCESSFUL

Total time: 1.18 secs
{% endhighlight %}

하지만 core 프로젝트에 의존성이 있는 server 프로젝트를 빌드하게 되면, 다음과 같이 core프로젝트가 빌드된 후 server 프로젝트를 build하게 된다.

{% highlight bash %}
:core:compileJava UP-TO-DATE
:core:processResources NO-SOURCE
:core:classes UP-TO-DATE
:core:jar UP-TO-DATE
:server:compileJava UP-TO-DATE
:server:processResources NO-SOURCE
:server:classes UP-TO-DATE
:server:jar UP-TO-DATE
:server:assemble UP-TO-DATE
:server:compileTestJava UP-TO-DATE
:server:processTestResources NO-SOURCE
:server:testClasses UP-TO-DATE
:server:test UP-TO-DATE
:server:check UP-TO-DATE
:server:build UP-TO-DATE

BUILD SUCCESSFUL

Total time: 1.124 secs
{% endhighlight %}