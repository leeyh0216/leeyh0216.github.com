---
layout: post
title:  "[DeepEdu5] 2장 퍼셉트론"
date:   2017-06-30 22:00:00 +0900
author: leeyh0216
categories: deeplearning study deepedu5
---

> 이 문서는 모두의 연구소 DeepLearning Edu 5기 7월 1일 스터디 진행을 위해 작성한 문서입니다.

## 퍼셉트론

> 퍼셉트론(Perceptron)은 인공신경망의 한 종류로써, 1957년에 코넬 항공 연구소의 프랑크 로젠블라트(Frank Rosenblatt)에 의해 고안되었다.
> 출처 : [Wikipedia - 퍼셉트론](https://ko.wikipedia.org/wiki/%ED%8D%BC%EC%85%89%ED%8A%B8%EB%A1%A0)

### 퍼셉트론이란? 

퍼셉트론은 **다수의 신호를 입력**으로 받아 **하나의 신호를 출력**한다. 퍼셉트론에서의 '신호'는 0 혹은 1의 값을 가질 수 있다. 일반적으로 1을 신호가 흐른다, 0을 신호가 흐르지 않는다고 해석한다.

<img src="http://cfile23.uf.tistory.com/image/23573D3656C2D8421CF2FE">
> 출처 : http://untitledtblog.tistory.com/27

위 그림에서 input layer의 x0 ~ xi 는 입력 신호, output layer의 원에서 나가는 output은 출력신호, w0 ~ wi는 가중치를 나타낸다.

그림에서 원은 '뉴런' 또는 '노드' 라고 부른다. 입력 신호가 뉴런에 보내질 때는 각각 고유한 **가중치**가 곱해진다.
즉, output layer에 존재하는 출력 노드의 값은 x0w0 + x1w1 ... + xiwi 이다.

출력 노드는 자신에게 들어온 값이 정해진 한계(임계값, θ)을 넘어설 때만 1을 출력하고, 그 이외의 경우 0을 출력한다.

가중치의 값이 클수록 입력 신호와의 곱이 커져 출력에 영향을 크게 미치므로, 가중치가 클수록 해당 신호가 더 중요하다는 의미를 가진다.

### 단순한 논리회로

#### AND 게이트

AND 게이트는 입력이 둘이고 출력이 하나인 게이트이다. 입력 신호와 출력신호는 0,1 값을 가질 수 있으며, 진리표는 다음과 같다.

   x1   |   x2   |   y    
--------|--------|-------
   0    |    0   |   0
   1    |    0   |   0
   0    |    1   |   0
   1    |    1   |   1
   
   
AND 게이트는 위의 진리표와 같이 두 값이 모두 1일때만 1을 출력하고, 나머지의 경우에는 0을 출력한다.

퍼셉트론으로 위의 AND 게이트를 표현하기 위해 w1, w2, θ 값을 정해보면 많은 조합을 생성할 수 있는 것을 알 수 있다.
(0.1, 0.1, 0.19), (0.3, 0.3, 0.5) 등 많은 경우의 수가 나오는 것을 알 수 있다.

#### NAND 게이트와 OR 게이트

NAND 게이트는 Not AND Gate를 의미하고, AND 게이트의 출력값을 반전시킨 것이다.
NAND 게이트의 진리표는 아래와 같다.

   x1   |   x2   |   y    
--------|--------|-------
   0    |    0   |   1
   1    |    0   |   1
   0    |    1   |   1
   1    |    1   |   0
   
위 진리표를 해석하자면, x1,x2 두 값이 모두 1일 때만 출력이 0이고 그 이외의 경우 모두 출력이 1이라는 결론이 나오게 된다.

OR 게이트는 입력 신호 중 하나 이상이 1이면 출력이 1이 되는 논리회로이다.
진리표는 아래와 같다.

   x1   |   x2   |   y    
--------|--------|-------
   0    |    0   |   0
   1    |    0   |   1
   0    |    1   |   1
   1    |    1   |   1
   

### 퍼셉트론 구현하기

#### 단순 AND 게이트를 파이썬으로 구현하기

다음은 AND 게이트(퍼셉트론)을 파이썬으로 구현한 예이다.

{% highlight python %}
###### AND 게이트를 퍼셉트론으로 구현
def AND(x1, x2):
    w1, w2, theta = 0.5, 0.5, 0.7
    tmp_result = w1*x1 + w2*x2
    if tmp_result>theta:
        return 1
    else:
        return 0

print(AND(0,0))
print(AND(0,1))
print(AND(1,0))
print(AND(1,1))

{% endhighlight %}

#### 가중치와 편향(Bias)

AND 게이트를 수식으로 표현하면 다음과 같다.

output(y) | 수식
----------|----------
0         | x1w1+x2w2-θ<=0
1         | x1w1+x2w2-θ>0

여기서 -θ값을 b라는 값으로 치환하면 다음과 같다.

output(y) | 수식
----------|----------
0         | x1w1+x2w2+b<=0
1         | x1w1+x2w2+b>0

사실상 기호 표기만 변경되었으며, 의미는 같다. 이제 b를 편향(bias)라는 용어로 부를 것이다.
수식을 해석해보면, 입력값과 가중치의 합을 편향과 합하여 이 값이 0을 넘으면 1, 그렇지 않을 경우 0이 출력된다.

이제, 이 수식을 python과 numpy로 구현해볼 것이다.

#### python과 numpy로 perceptron 구현하기

{% highlight python %}
import numpy as np

x = np.array([0,1])
w = np.array([0.3,0.3])
b = -0.7

def perceptron(x,w,b):
    return np.sum(x*w)+b

print(perceptron(np.array([0,1]),np.array([0.3,0.3]),-0.7))
{% endhighlight %}

위 코드에서 x와 w를 곱하게 되면, 0x0.3 + 1x0.3 = 0.3이 되고, 이 값에 -0.7을 더하게 되면 -0.4라는 값이 출력되게 된다.
이로써 numpy와 python으로 perceptron을 구현하였다.

#### 구현한 perceptron을 활용하여 AND perceptron 만들기

위에서 구현한 perceptron은 입력값과 가중치의 곱의 합과 bias의 합을 반환한다.
AND 게이트 정규식을 만족시키는 w1, w2, θ 의 값을 (0.3,0.3,0.5)라고 가정하면, w와 b의 값은 각각 (0.3,0.3), -0.5가 될 것이다.

AND 게이트는 위 값들을 적용한 perceptron의 결과가 0보다 클 때 1, 0보다 작을 때 0을 반환하면 된다.

{% highlight python %}
def perceptron_and(x):
    result = perceptron(x,np.array([0.3,0.3]),-0.5)
    if(result>0):
        return 1
    else:
        return 0

print(perceptron_and(np.array([0,0])))
print(perceptron_and(np.array([0,1])))
print(perceptron_and(np.array([1,0])))
print(perceptron_and(np.array([1,1])))
{% endhighlight %}

### 퍼셉트론의 한계

#### 직선으로 공간을 나누어보자

AND 게이트에 사용되는 진리표의 값들을 그래프에 표현해보자.

<img src="https://user-images.githubusercontent.com/7621901/27743080-cfc990b2-5df5-11e7-965f-b8fa741f6ac2.png">

위 그래프 그림에서 (1,1) 점과 (0,0), (0,1), (1,0) 을 나눌 수 있는 직선이 그려져 있다.
우리가 만드는 퍼셉트론 공식은 위와 같이 한 평면 위에서 값들을 나누게 만드는 직선의 방정식인 것이다.

#### XOR 게이트와 공간 나누기

XOR 게이트는 베타적 논리합이라는 논리회로이다.
입력 값인 x1, x2 중 한쪽이 1일때만 1을 출력하고 나머지 경우는 0을 출력한다.
진리표는 아래와 같다.

x1 | x2 | y
---|----|----
 0 | 1  | 1
 1 | 0  | 1
 0 | 0  | 0
 1 | 1  | 0
 
위 진리표의 값들을 평면에 표현해보면 아래와 같다.

<img src="https://user-images.githubusercontent.com/7621901/27743334-9d371b28-5df6-11e7-889d-36a6823a9f26.png">

빨간 점이 출력이 1이 되는 점, 검정 점이 출력이 0이 되는 점이다.

위 점들을 나누기 위해서는 직선이 아닌 곡선이 필요하다.
곡선은 2차 방정식 부터 표현되는 개념이므로, 우리가 구현한 퍼셉트론으로는 위 그림의 점들을 나눌 수 없다.

이렇게 직선으로 나눌 수 있는 것을 **선형** , 직선이 아닌 곡선으로 나눌 수 있는 것을 **비선형** 이라고 한다.

### 다층 퍼셉트론
